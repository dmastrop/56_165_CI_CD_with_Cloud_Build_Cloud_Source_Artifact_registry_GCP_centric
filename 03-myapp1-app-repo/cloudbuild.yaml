# [START cloudbuild - Docker Image Build]
steps:
# This step builds the container image.
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
  - 'build'
  - '-t'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/myapps-repository/myapp1:$SHORT_SHA'
  - '.'

# This step pushes the image to Artifact Registry
# The PROJECT_ID and SHORT_SHA variables are automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - 'push'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/myapps-repository/myapp1:$SHORT_SHA'
# [END cloudbuild - Docker Image Build]
# up to here is the original cloudbuild.yaml file
# the lines below are the addtional trigger code to trigger the CD


# [START cloudbuild-trigger-cd]
# Remember: the trigger for CI on Cloud Build points to this cloudbuild.yaml  on the myapp1-app-repo.
# This step clones the myapp1-k8s-repo repository
# clone to the Cloud Build
# it checks out the candidate branch.
# this is so that it can get the kubernetes.yaml file on the myapp1-k8s-repo for the deployment phase
# This prep involves a push the kubernetes.yaml file to the repo.
- name: 'gcr.io/cloud-builders/gcloud'
# use gcloud command
  id: Clone myapp1-k8s-repo repository
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    gcloud source repos clone myapp1-k8s-repo && \
    cd myapp1-k8s-repo && \
    git checkout candidate && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
# This step generates the new manifest
# this uses the  newly added kubernetes.yaml.tpl file that we
# add the the myapp1-app-repo Cloud Source repo that is used for the CI
- name: 'gcr.io/cloud-builders/gcloud'
# use gcloud command
# this dynamically generates the new K8s manifest based on the latest SHA docker image and the 
# current GOOGLE_CLOUD_PROJECT(PROJECT_ID). The new file named kubernetes.yaml in directory myapp1-k8s-repo
  id: Generate Kubernetes manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
     sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" kubernetes.yaml.tpl | \
     sed "s/COMMIT_SHA/${SHORT_SHA}/g" > myapp1-k8s-repo/kubernetes.yaml
# This step pushes the manifest back to myapp1-k8s-repo candidate branch
# remember that Cloud Build SA has commit and access writes to this repo
# the Cloud Build trigger (cloudbuild-delivery.yaml) for the actual deployment will need this yaml file
# to deploy the cluster.
# NOTE that the push here to the myapp1-k8s-repo to candidate will trigger the CD per the Cloud Build trigger
# the deployment trigger will take over (cloudbuild-delivery.yaml)
- name: 'gcr.io/cloud-builders/gcloud'
  id: Push manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    cd myapp1-k8s-repo && \
    git add kubernetes.yaml && \
    git commit -m "Deploying image us-central1-docker.pkg.dev/$PROJECT_ID/myapps-repository/myapp1:${SHORT_SHA}
    Built from commit ${COMMIT_SHA} of repository myapp1-app-repo
    Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
    git push origin candidate
# [END cloudbuild-trigger-cd]